{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.cartData = new EventEmitter();\n    }\n    // Adds a new product to the server\n    addProduct(data) {\n      return this.http.post('http://localhost:3000/products', data);\n    }\n    // Fetches a list of all products from the server\n    productList() {\n      return this.http.get('http://localhost:3000/products');\n    }\n    // Deletes a product from the server by ID\n    deleteProduct(id) {\n      return this.http.delete(`http://localhost:3000/products/${id}`);\n    }\n    // Fetches a product from the server by its ID\n    getProduct(id) {\n      return this.http.get(`http://localhost:3000/products/${id}`);\n    }\n    // Updates an existing product on the server\n    updateProduct(product) {\n      return this.http.put(`http://localhost:3000/products/${product.id}`, product);\n    }\n    // Fetches a list of popular products from the server\n    popularProducts() {\n      return this.http.get('http://localhost:3000/products?_limit=5');\n    }\n    // Fetches a list of trendy products from the server\n    trendyProducts() {\n      return this.http.get('http://localhost:3000/products?_limit=50');\n    }\n    // Searches for products on the server based on a query\n    searchProduct(query) {\n      return this.http.get(`http://localhost:3000/products?q=${query}`);\n    }\n    // Adds a product to the local cart and emits an event\n    localAddToCart(data) {\n      let cartData = [];\n      let localCart = localStorage.getItem('localCart');\n      if (!localCart) {\n        localStorage.setItem('localCart', JSON.stringify([data]));\n        this.cartData.emit([data]);\n      } else {\n        cartData = JSON.parse(localCart);\n        cartData.push(data);\n        localStorage.setItem('localCart', JSON.stringify(cartData));\n        this.cartData.emit(cartData);\n      }\n    }\n    // Removes a product from the local cart and emits an event\n    removeItemFromCart(productId) {\n      let cartData = localStorage.getItem('localCart');\n      if (cartData) {\n        let items = JSON.parse(cartData);\n        items = items.filter(item => productId !== item.id);\n        localStorage.setItem('localCart', JSON.stringify(items));\n        this.cartData.emit(items);\n      }\n    }\n    // Adds a product to the server's cart\n    addToCart(cartData) {\n      return this.http.post('http://localhost:3000/cart', cartData);\n    }\n    // Fetches the user's cart items from the server and emits an event\n    getCartList(userId) {\n      return this.http.get('http://localhost:3000/cart?userId=' + userId, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result && result.body) {\n          this.cartData.emit(result.body);\n        }\n      });\n    }\n    // Removes a product from the server's cart\n    removeToCart(cartId) {\n      return this.http.delete('http://localhost:3000/cart/' + cartId);\n    }\n    // Fetches the current cart items for a user from the server\n    currentCart() {\n      let userStore = localStorage.getItem('user');\n      let userData = userStore && JSON.parse(userStore);\n      return this.http.get('http://localhost:3000/cart?userId=' + userData.id);\n    }\n    // Places an order for cart items\n    orderNow(data) {\n      return this.http.post('http://localhost:3000/orders', data);\n    }\n    // Fetches a list of orders for a user\n    orderList() {\n      let userStore = localStorage.getItem('user');\n      let userData = userStore && JSON.parse(userStore);\n      return this.http.get('http://localhost:3000/orders?userId=' + userData.id);\n    }\n    // Deletes cart items by ID and emits an event\n    deleteCartItems(cartId) {\n      return this.http.delete('http://localhost:3000/cart/' + cartId).subscribe(result => {\n        this.cartData.emit([]);\n      });\n    }\n    // Cancels an order by ID\n    cancelOrder(orderId) {\n      return this.http.delete('http://localhost:3000/orders/' + orderId);\n    }\n    static #_ = this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}