{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      // EventEmitter to signal invalid user authentication\n      this.invalidUserAuth = new EventEmitter(false);\n    }\n    // Handles the user sign-up process\n    userSignUp(user) {\n      this.http.post('http://localhost:3000/users', user, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result) {\n          // Store user data in local storage\n          localStorage.setItem('user', JSON.stringify(result.body));\n          // Navigate to the home page after successful sign-up\n          this.router.navigate(['/']);\n        }\n      });\n    }\n    // Handles the user login process\n    userLogin(data) {\n      this.http.get(`http://localhost:3000/users?email=${data.email}&password=${data.password}`, {\n        observe: 'response'\n      }).subscribe(result => {\n        if (result && result.body?.length) {\n          // If a valid user is found, store user data in local storage\n          localStorage.setItem('user', JSON.stringify(result.body[0]));\n          // Navigate to the home page after successful login\n          this.router.navigate(['/']);\n          // Emit an event to indicate successful login\n          this.invalidUserAuth.emit(false);\n        } else {\n          // If login fails, emit an event to indicate authentication error\n          this.invalidUserAuth.emit(true);\n        }\n      });\n    }\n    // Checks if a user is already logged in and navigates to the home page\n    userAuthReload() {\n      if (localStorage.getItem('user')) {\n        this.router.navigate(['/']);\n      }\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}